{"ast":null,"code":"import axios from 'axios';\nexport default (async (req, res) => {\n  const tmp = req.headers.cookie.split('; ').reduce(function (result, v, i, a) {\n    var k = v.split('=');\n    result[k[0]] = k[1];\n    return result;\n  }, {});\n  const headers = {\n    headers: {\n      'x-shopify-access-token': tmp.accessToken\n    }\n  };\n  const url = 'https://' + tmp.shopOrigin + '/admin/api/2019-10/';\n\n  switch (req.method) {\n    case 'GET':\n      {\n        const response = await axios.get(url + 'shop.json', headers); //console.log('response from shopify',response)    \n\n        if (response.status === 200) {\n          const data = JSON.parse(JSON.stringify(response.data.shop));\n          res.statusCode = 200;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            shop: data\n          }));\n        } else {\n          res.statusCode = 400;\n        }\n      }\n      break;\n\n    case 'PUT':\n      {\n        const variants = req.body.shopify_variants;\n\n        if (!variants || variants.length <= 0) {\n          res.statusCode = 400;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            shop: 'Variantes no encontradas'\n          }));\n          break;\n        }\n\n        let promises = [];\n\n        for (let i = 0; i < variants.length; i++) {\n          const tmp = variants[i].id.split('/');\n          const id = tmp[tmp.length - 1];\n          const payload = {\n            variant: {\n              id,\n              price: variants[i].price\n            }\n          };\n          promises.push(axios.put(`${url}/variants/${id}.json`, payload, headers));\n        }\n\n        await Promise.all(promises);\n        res.statusCode = 200;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          shop: 'ok'\n        }));\n      }\n      break;\n\n    default:\n      {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          shop: 'Metodo no encontrado'\n        }));\n      }\n  }\n});","map":{"version":3,"sources":["C:/Users/rafae/Desktop/Bootcamp/Front-Back/app_shopify/pages/api/shopify.js"],"names":["axios","req","res","tmp","headers","cookie","split","reduce","result","v","i","a","k","accessToken","url","shopOrigin","method","response","get","status","data","JSON","parse","stringify","shop","statusCode","setHeader","end","variants","body","shopify_variants","length","promises","id","payload","variant","price","push","put","Promise","all"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nexport default async(req, res)=>{\r\n    \r\n    const tmp = req.headers.cookie.split('; ').reduce(function(result, v, i, a) { var k = v.split('='); result[k[0]] = k[1]; return result; }, {})\r\n    \r\n    const headers =  {headers: { 'x-shopify-access-token': tmp.accessToken }} \r\n    const url = 'https://' + tmp.shopOrigin + '/admin/api/2019-10/'\r\n\r\n\r\n    switch(req.method) {\r\n        case 'GET': {\r\n            const response = await axios.get( url + 'shop.json', headers)\r\n            //console.log('response from shopify',response)    \r\n            \r\n            if(response.status===200){\r\n\r\n                const data = JSON.parse(JSON.stringify(response.data.shop))\r\n\r\n                res.statusCode = 200\r\n                res.setHeader('Content-Type', 'application/json')    \r\n                res.end(JSON.stringify( {shop:  data} ))    \r\n                \r\n            }else{\r\n                res.statusCode = 400\r\n            }\r\n            \r\n        }\r\n        break;\r\n        case 'PUT': {\r\n            const variants = req.body.shopify_variants\r\n            if(!variants || variants.length <= 0){\r\n                res.statusCode = 400\r\n                res.setHeader('Content-Type', 'application/json')    \r\n                res.end(JSON.stringify( {shop:  'Variantes no encontradas'} ))    \r\n                break;\r\n            }\r\n\r\n            let promises = []\r\n            for(let i=0; i<variants.length; i++) {\r\n                const tmp = variants[i].id.split('/')\r\n                const id = tmp[tmp.length-1]\r\n\r\n                const payload = {\r\n                    variant: {\r\n                        id,\r\n                        price: variants[i].price\r\n                    }\r\n                }\r\n                promises.push(axios.put(`${url}/variants/${id}.json`, payload, headers))\r\n            }\r\n\r\n            await Promise.all(promises)\r\n\r\n            res.statusCode = 200\r\n            res.setHeader('Content-Type', 'application/json')    \r\n            res.end(JSON.stringify( {shop:  'ok'} ))    \r\n\r\n        }\r\n        break;\r\n\r\n        default: {\r\n            res.statusCode = 400\r\n            res.setHeader('Content-Type', 'application/json')    \r\n            res.end(JSON.stringify( {shop:  'Metodo no encontrado'} ))    \r\n        }\r\n    }\r\n\r\n\r\n    \r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}